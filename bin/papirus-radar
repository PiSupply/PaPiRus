#!/usr/bin/env python

# Demo showing the dependency of frame update duration on temperature
#
# Fastest update is with temperature set to > 60, but ghosting is evident.
# Lower temperatures give blacker updates, with less ghosting.
# By not using the LM75B temperature sensor, we can fake the temperature by
# writing to /dev/epd/termperature 
#
# This demo is a modified version of David Lowe's original demo (https://github.com/campag/eink-demo)
# Best results with the epd driver with continous temperature compensation.

import thread
import string
import time
import sys

from datetime import datetime, timedelta
from subprocess import call, check_output
from PIL import Image
from PIL import ImageDraw, ImageFont
from papirus import Papirus

epd = Papirus()

SCREEN_WIDTH  = epd.size[0]
SCREEN_HEIGHT = epd.size[1]

SCREEN_WIDTH-=1
SCREEN_HEIGHT-=1

FONTFILE = '/usr/share/fonts/truetype/freefont/FreeMonoBold.ttf'

SIZE_MED = int(SCREEN_HEIGHT/4)  #24
FONT_MED = ImageFont.truetype(FONTFILE, SIZE_MED)
CHRW_MED = FONT_MED.getsize("0")[0]

WHITE = 1
BLACK = 0

DURATION = 15 # seconds

image = Image.new('1', epd.size, WHITE)
draw = ImageDraw.Draw(image)

def epd_draw(lagtime, packet_num):

    # Clear drawing
    draw.rectangle([(0,0), (SCREEN_WIDTH, SCREEN_HEIGHT)], fill=WHITE, outline=WHITE)

    # Draw radar
    draw.ellipse([((SCREEN_WIDTH-SCREEN_HEIGHT)/2,0),(SCREEN_HEIGHT+(SCREEN_WIDTH-SCREEN_HEIGHT)/2, SCREEN_HEIGHT)], outline=BLACK)
    draw.pieslice([((SCREEN_WIDTH-SCREEN_HEIGHT)/2,0),(SCREEN_HEIGHT+(SCREEN_WIDTH-SCREEN_HEIGHT)/2, SCREEN_HEIGHT)], 10*packet_num-2, 10*packet_num+2, fill=BLACK)

    # Temperature & seconds counter
    temp=check_output(["cat", "/dev/epd/temperature"])
    temp=temp[:-1]+u'\u00b0C'
    now = datetime.today()
    draw.text((SCREEN_WIDTH/2-5.0*CHRW_MED, SCREEN_HEIGHT/2-1.5*SIZE_MED), "%s %02ds" %(temp, now.second), fill=BLACK, font=FONT_MED)

    # fps
    fps10x=10000/lagtime
    draw.text((SCREEN_WIDTH/2-3.0*CHRW_MED, SCREEN_HEIGHT/2-0.5*SIZE_MED), "%3dfps" %fps10x, fill=BLACK, font=FONT_MED)
    draw.text((SCREEN_WIDTH/2-1.4*CHRW_MED, SCREEN_HEIGHT/2-0.5*SIZE_MED), ".", fill=BLACK, font=FONT_MED)

    # Cycle time
    draw.text((SCREEN_WIDTH/2-2.5*CHRW_MED, SCREEN_HEIGHT/2+0.5*SIZE_MED), "%3dms" %lagtime, fill=BLACK, font=FONT_MED)

    # Swap rendered image to epd image buffer
    epd.display(image)
    if lagtime > 0:
        epd.partial_update()

    return

# Main entry

temps = [25, 35, 45, 55, 65]
for temp in temps:

    epd.use_lm75b = True
    epd.clear()

    epd.use_lm75b = False
    # Set temperature
    cmd = "echo " + str(temp) + " > /dev/epd/temperature"
    call([cmd], shell=True)

    counter=0
    frametime=-1  # No screen update for first frame

    try:
        starttime = datetime.now()
        delta = timedelta(seconds = DURATION)
        while (True):
            prev=datetime.now()
            epd_draw(frametime,counter)
            curr=datetime.now()
            if (curr - starttime) > delta:
                break
            frametime=(curr-prev).seconds*1000 + (curr - prev).microseconds/1000
            counter += 1
    except KeyboardInterrupt:
        print "\nClearing panel for long term storage"
        epd.use_lm75b = True
        epd.clear()
        epd.clear()
        sys.exit('\nKeyboard interrupt')

epd.use_lm75b = True
epd.clear()
epd.clear()
